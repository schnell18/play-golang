// Code generated by cachegen. DO NOT EDIT.
package product

import (
	"context"
	"encoding/json"
	"time"

	"github.com/redis/go-redis/v9"
	"golang.org/x/sync/singleflight"
)

var (
	rdb     = redis.NewClient(&redis.Options{Addr: "localhost:6379"})
	sfGroup singleflight.Group
)

// CachedGetByID is a cacheable wrapper for Service.GetByID
func CachedGetByID(s *Service, ctx context.Context, id string) (*Product, error) {
	cacheKey := "product:" + id

	// try cache
	raw, err := rdb.Get(ctx, cacheKey).Result()
	if err == nil {
		var p Product
		if json.Unmarshal([]byte(raw), &p) == nil {
			return &p, nil
		}
	}

	if err != nil && err != redis.Nil {
		return nil, err
	}

	// cache miss â†’ singleflight load
	v, err, _ := sfGroup.Do(cacheKey, func() (interface{}, error) {
		p, e := s.GetByID(ctx, id)
		if e != nil {
			return nil, e
		}
		b, merr := json.Marshal(p)
		if merr == nil {
			_ = rdb.Set(ctx, cacheKey, b, 10*time.Minute).Err()
		}
		return p, nil
	})
	if err != nil {
		return nil, err
	}
	return v.(*Product), nil
}

// CachedUpdateProduct is a cache-evict wrapper for Service.UpdateProduct
func CachedUpdateProduct(s *Service, ctx context.Context, p *Product) error {
	err := s.UpdateProduct(ctx, p)
	if err == nil {
		cacheKey := "product:" + p.ID
		_ = rdb.Del(ctx, cacheKey).Err()
	}
	return err
}

// CachedDeleteProduct is a cache-evict wrapper for Service.DeleteProduct
func CachedDeleteProduct(s *Service, ctx context.Context, id string) error {
	err := s.DeleteProduct(ctx, id)
	if err == nil {
		cacheKey := "product:" + id
		_ = rdb.Del(ctx, cacheKey).Err()
	}
	return err
}
