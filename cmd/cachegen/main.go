package main

import (
	"fmt"
	"go/parser"
	"go/token"
	"os"
	"path/filepath"
	"regexp"
	"strings"

	"github.com/dave/jennifer/jen"
)

var cacheRe = regexp.MustCompile(
	`cache:cacheable\s+name=(\S+)\s+GetByID\s+ttl=(\S+)\s+key=(\S+)`,
)

func main() {
	// 1) find .go files in the package (skip generated)
	fset := token.NewFileSet()
	pkgs, err := parser.ParseDir(fset, ".", func(fi os.FileInfo) bool {
		return !strings.HasSuffix(fi.Name(), "_test.go") &&
			!strings.HasSuffix(fi.Name(), ".gen.go")
	}, parser.ParseComments)
	if err != nil {
		panic(err)
	}

	for pkgName, pkg := range pkgs {
		for fname, f := range pkg.Files {
			for _, cg := range f.Comments {
				for _, c := range cg.List {
					m := cacheRe.FindStringSubmatch(c.Text)
					if m == nil {
						continue
					}
					// Extracted: m[1]=cacheName, m[2]=ttl, m[3]=keyPattern
					cacheName, ttl, key := m[1], m[2], m[3]
					fmt.Printf(
						"Found cache annotation in %s: cache=%s ttl=%s key=%s\n",
						fname,
						cacheName,
						ttl,
						key,
					)
					// Generate wrapper
					generateWrapper(pkgName, cacheName, ttl, key)
				}
			}
		}
	}
}

func generateWrapper(pkgName, cacheName, ttl, keyPattern string) {
	f := jen.NewFile(pkgName)
	f.HeaderComment("Code generated by cachegen. DO NOT EDIT.")
	f.ImportName("context", "context")
	f.ImportName("encoding/json", "encoding/json")
	f.ImportName("time", "time")
	f.ImportName("github.com/redis/go-redis/v9", "redis")
	f.ImportName("golang.org/x/sync/singleflight", "singleflight")

	// global redis client variable (simplified)
	f.Var().
		Id("rdb").
		Op("=").
		Qual("github.com/redis/go-redis/v9", "NewClient").
		Call(
			jen.Op("&").
				Qual("github.com/redis/go-redis/v9", "Options").
				Values(jen.Dict{
					jen.Id("Addr"): jen.Lit("localhost:6379"),
				}),
		)

	// singleflight group
	f.Var().Id("sfGroup").Qual("golang.org/x/sync/singleflight", "Group")

	// Example wrapper: CachedGetByID(s *Service, ctx context.Context, id string) (*User, error)
	f.Func().Id("CachedGetByID").Params(
		jen.Id("s").Op("*").Id("Service"),
		jen.Id("ctx").Qual("context", "Context"),
		jen.Id("id").String(),
	).Params(jen.Op("*").Id("User"), jen.Error()).Block(
		// build key
		jen.Id("cacheKey").
			Op(":=").
			Lit(strings.ReplaceAll(keyPattern, "{id}", "")).
			Op("+").
			Id("id"),
		// try redis
		jen.List(jen.Id("raw"), jen.Id("err")).
			Op(":=").
			Id("rdb").
			Dot("Get").
			Call(jen.Id("ctx"), jen.Id("cacheKey")).
			Dot("Result").
			Call(),
		jen.If(jen.Id("err").Op("==").Qual("github.com/redis/go-redis/v9", "Nil")).
			Block(
				// cache miss: use singleflight to coalesce concurrent loads
				jen.List(jen.Id("v"), jen.Id("err2"), jen.Id("_")).
					Op(":=").
					Id("sfGroup").
					Dot("Do").
					Call(
						jen.Id("cacheKey"),
						jen.Func().
							Params().
							Params(jen.Interface(), jen.Error()).
							Block(
								jen.List(jen.Id("u"), jen.Id("e")).
									Op(":=").
									Id("s").
									Dot("GetByID").
									Call(jen.Id("ctx"), jen.Id("id")),
								jen.If(jen.Id("e").Op("!=").Nil()).Block(
									jen.Return(jen.Nil(), jen.Id("e")),
								),
								jen.List(jen.Id("b"), jen.Id("merr")).
									Op(":=").
									Qual("encoding/json", "Marshal").
									Call(jen.Id("u")),
								jen.If(jen.Id("merr").Op("==").Nil()).Block(
									jen.Id("rdb").
										Dot("Set").
										Call(jen.Id("ctx"), jen.Id("cacheKey"), jen.Id("b"), jen.Qual("time", "Duration").Call()),
									// Note: in this tiny example we ignore TTL parsing; production generator should convert ttl to time.Duration
								),
								jen.Return(jen.Id("u"), jen.Nil()),
							),
					),
				jen.If(jen.Id("err2").Op("!=").Nil()).
					Block(jen.Return(jen.Nil(), jen.Id("err2"))),
				jen.Id("u").
					Op(":=").
					Id("v").
					Op(".").
					Parens(jen.Id("*").Add(jen.Id("User"))),
				jen.Return(jen.Id("u"), jen.Nil()),
			).
			Else().
			Block(
				// redis returned something (cache hit)
				jen.Var().Id("user").Id("User"),
				jen.If(jen.Err().Op(":=").Qual("encoding/json", "Unmarshal").Call(jen.Id("[]byte").Call(jen.Id("raw")), jen.Op("&").Id("user")), jen.Err().Op("==").Nil()).
					Block(
						jen.Return(jen.Op("&").Id("user"), jen.Nil()),
					),
				jen.Return(jen.Nil(), jen.Id("err")),
			),
	)

	out := filepath.Join(".", "zz_generated_cache.go")
	_ = f.Save(out)
	fmt.Println("generated", out)
}
